package edu.isistan.reassistant.ccdetector.gui.standalone;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.emf.common.command.BasicCommandStack;
import org.eclipse.emf.common.command.Command;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.edit.command.AddCommand;
import org.eclipse.emf.edit.command.RemoveCommand;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;

import edu.isistan.reassistant.ccdetector.CCDetectorModelInitializer;
import edu.isistan.reassistant.ccdetector.gui.composite.CompositeCCRule;
import edu.isistan.reassistant.ccdetector.gui.composite.CompositeCCRuleSet;
import edu.isistan.reassistant.ccdetector.model.CCDetectorModelFactory;
import edu.isistan.reassistant.ccdetector.model.CCDetectorModelPackage;
import edu.isistan.reassistant.ccdetector.model.CCDetectorModelPackage.Literals;
import edu.isistan.reassistant.ccdetector.model.CrosscuttingConcernRule;
import edu.isistan.reassistant.ccdetector.model.CrosscuttingConcernRuleSet;
import edu.isistan.reassistant.ccdetector.model.Query;
import edu.isistan.reassistant.ccdetector.model.provider.CCDetectorModelItemProviderAdapterFactory;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.events.DisposeEvent;

@SuppressWarnings("unused")
public class CCRuleEditor {
	protected Shell shlCrosscuttingConcernRule;

	protected ComposedAdapterFactory adapterFactory;
	protected AdapterFactoryEditingDomain editingDomain;
	private String modelURI;
	protected CrosscuttingConcernRuleSet modelRoot;

	private CompositeCCRuleSet compositeRules;
	private CompositeCCRule compositeRule;

	public CCRuleEditor() {
		this.modelURI = getModelsPath() + "rules/ruleset.xmi";
		initializeEditingDomain();
		createModel();
	}
	
	public String getModelsPath() {
		String modelsPath = null;
		if(modelsPath == null || modelsPath.isEmpty())
			modelsPath = System.getenv("MODELS_PATH");
		if(modelsPath == null || modelsPath.isEmpty())
			modelsPath = System.getProperty("MODELS_PATH");
		return modelsPath;
	}
	
	/**
	 * Open the window.
	 */
	public void open() {
		final Display display = Display.getDefault();
		Realm.runWithDefault(SWTObservables.getRealm(display), new Runnable() {
			public void run() {
				createContents();
				shlCrosscuttingConcernRule.open();
				shlCrosscuttingConcernRule.layout();
				while (!shlCrosscuttingConcernRule.isDisposed()) {
					if (!display.readAndDispatch()) {
						display.sleep();
					}
				}
			}
		});
	}

	/**
	 * Create contents of the window.
	 */
	protected void createContents() {
		shlCrosscuttingConcernRule = new Shell();
		shlCrosscuttingConcernRule.addDisposeListener(new DisposeListener() {
			public void widgetDisposed(DisposeEvent e) {
				if(isDirty()) {
					if(MessageDialog.openQuestion(shlCrosscuttingConcernRule, "Save Crosscutting Concern Rule Set", "The rule set has been modified. Save changes?")) {
						save();
					}
				}
			}
		});
		shlCrosscuttingConcernRule.setSize(700, 550);
		shlCrosscuttingConcernRule.setText("Crosscutting Concern Rule Editor");
		shlCrosscuttingConcernRule.setLayout(new FillLayout(SWT.HORIZONTAL));
		
		SashForm sashForm = new SashForm(shlCrosscuttingConcernRule, SWT.NONE);
		
		compositeRules = new CompositeCCRuleSet(sashForm, SWT.NONE, editingDomain);
		compositeRules.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		compositeRules.getBtnAdd().addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				CrosscuttingConcernRule rule = CCDetectorModelFactory.eINSTANCE.createCrosscuttingConcernRule();
				rule.setID(UUID.randomUUID().toString());
				rule.setName("New Rule");
				rule.setMetadata("Autogenerated metadata");
				rule.setDirectQuerySet(CCDetectorModelFactory.eINSTANCE.createQuerySet());
				rule.setImpactQuerySet(CCDetectorModelFactory.eINSTANCE.createQuerySet());
				Command command = AddCommand.create(editingDomain, modelRoot, Literals.CROSSCUTTING_CONCERN_RULE_SET__RULES, rule);
				editingDomain.getCommandStack().execute(command);
				compositeRules.getRulesListViewer().setSelection(new StructuredSelection(rule));
			}
		});
		
		compositeRules.getBtnRemove().addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				StructuredSelection selection = (StructuredSelection) compositeRules.getRulesListViewer().getSelection();
				if(!selection.isEmpty()) {
					CrosscuttingConcernRule rule = (CrosscuttingConcernRule) selection.getFirstElement();
					Command command = RemoveCommand.create(editingDomain, modelRoot, Literals.CROSSCUTTING_CONCERN_RULE_SET__RULES, rule);
					editingDomain.getCommandStack().execute(command);
					if(modelRoot.getRules().size() > 0)
						compositeRules.getRulesListViewer().setSelection(new StructuredSelection(modelRoot.getRules().get(modelRoot.getRules().size() - 1)));
				}
			}
		});
		
		ScrolledComposite scrolledComposite = new ScrolledComposite(sashForm, SWT.H_SCROLL | SWT.V_SCROLL);
		scrolledComposite.setExpandHorizontal(true);
		scrolledComposite.setExpandVertical(true);
		
		compositeRule = new CompositeCCRule(scrolledComposite, SWT.NONE,editingDomain);
		scrolledComposite.setContent(compositeRule);
		scrolledComposite.setMinSize(compositeRule.computeSize(SWT.DEFAULT, SWT.DEFAULT));

		compositeRules.getController().setCrosscuttingConcernRuleSet(modelRoot);
		
		compositeRules.getRulesListViewer().addSelectionChangedListener(new ISelectionChangedListener() {

			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				StructuredSelection selection = (StructuredSelection) compositeRules.getRulesListViewer().getSelection();
				if(!selection.isEmpty()) {
					CrosscuttingConcernRule rule = (CrosscuttingConcernRule) selection.getFirstElement();
					compositeRule.getController().setCrosscuttingConcernRule(rule, true);
					compositeRule.getCompositeCCQuerySetDirect().getController().setQuerySet(rule.getDirectQuerySet());
					compositeRule.getCompositeCCQuerySetImpact().getController().setQuerySet(rule.getImpactQuerySet());
				}
				else {
					compositeRule.getIDText().setText("");
					compositeRule.getNameText().setText("");
					compositeRule.getMetadataText().setText("");
					compositeRule.getCompositionGuidelinesText().setText("");
					compositeRule.getComboCompositionRule().clearSelection();
				}
				compositeRule.getCompositeCCQuerySetDirect().getTextName().setText("");
				compositeRule.getCompositeCCQuerySetDirect().getTextQuery().setText("");
				compositeRule.getCompositeCCQuerySetImpact().getTextName().setText("");
				compositeRule.getCompositeCCQuerySetImpact().getTextQuery().setText("");
			}
		});
		
		compositeRule.getCompositeCCQuerySetDirect().getListViewerQueries().addSelectionChangedListener(new ISelectionChangedListener() {
			
			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				StructuredSelection selection = (StructuredSelection) compositeRule.getCompositeCCQuerySetDirect().getListViewerQueries().getSelection();
				if(!selection.isEmpty()) {
					Query query = (Query) selection.getFirstElement();
					compositeRule.getCompositeCCQuerySetDirect().getController().setQuery(query, true);
				}
				else {
					compositeRule.getCompositeCCQuerySetDirect().getTextName().setText("");
					compositeRule.getCompositeCCQuerySetDirect().getTextQuery().setText("");
				}
			}
		});
		
		compositeRule.getCompositeCCQuerySetImpact().getListViewerQueries().addSelectionChangedListener(new ISelectionChangedListener() {
			
			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				StructuredSelection selection = (StructuredSelection) compositeRule.getCompositeCCQuerySetImpact().getListViewerQueries().getSelection();
				if(!selection.isEmpty()) {
					Query query = (Query) selection.getFirstElement();
					compositeRule.getCompositeCCQuerySetImpact().getController().setQuery(query, true);
				}
				else {
					compositeRule.getCompositeCCQuerySetImpact().getTextName().setText("");
					compositeRule.getCompositeCCQuerySetImpact().getTextQuery().setText("");
				}
			}
		});
		
		compositeRule.getCompositeCCQuerySetDirect().getBtnAdd().addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				StructuredSelection selection = (StructuredSelection) compositeRules.getRulesListViewer().getSelection();
				if(!selection.isEmpty()) {
					CrosscuttingConcernRule rule = (CrosscuttingConcernRule) selection.getFirstElement();
					Query query = CCDetectorModelFactory.eINSTANCE.createQuery();
					query.setName("New Direct Query");
					query.setContent("Autogenerated query content");
					Command command = AddCommand.create(editingDomain, rule.getDirectQuerySet(), Literals.QUERY_SET__QUERIES, query);
					editingDomain.getCommandStack().execute(command);
					compositeRule.getCompositeCCQuerySetDirect().getListViewerQueries().setSelection(new StructuredSelection(query));
				}
			}
		});
		
		compositeRule.getCompositeCCQuerySetDirect().getBtnRemove().addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				StructuredSelection selectionRule = (StructuredSelection) compositeRules.getRulesListViewer().getSelection();
				StructuredSelection selectionQuery = (StructuredSelection) compositeRule.getCompositeCCQuerySetDirect().getListViewerQueries().getSelection();
				if(!selectionRule.isEmpty() && !selectionQuery.isEmpty()) {
					CrosscuttingConcernRule rule = (CrosscuttingConcernRule) selectionRule.getFirstElement();
					Query query = (Query) selectionQuery.getFirstElement();
					Command command = RemoveCommand.create(editingDomain, rule.getDirectQuerySet(), Literals.QUERY_SET__QUERIES, query);
					editingDomain.getCommandStack().execute(command);
					if(rule.getDirectQuerySet().getQueries().size() > 0)
						compositeRule.getCompositeCCQuerySetDirect().getListViewerQueries().setSelection(new StructuredSelection(rule.getDirectQuerySet().getQueries().get(rule.getDirectQuerySet().getQueries().size() - 1)));
				}
			}
		});
		
		compositeRule.getCompositeCCQuerySetImpact().getBtnAdd().addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				StructuredSelection selection = (StructuredSelection) compositeRules.getRulesListViewer().getSelection();
				if(!selection.isEmpty()) {
					CrosscuttingConcernRule rule = (CrosscuttingConcernRule) selection.getFirstElement();
					Query query = CCDetectorModelFactory.eINSTANCE.createQuery();
					query.setName("New Impact Query");
					query.setContent("Autogenerated query content");
					Command command = AddCommand.create(editingDomain, rule.getImpactQuerySet(), Literals.QUERY_SET__QUERIES, query);
					editingDomain.getCommandStack().execute(command);
					compositeRule.getCompositeCCQuerySetImpact().getListViewerQueries().setSelection(new StructuredSelection(query));
				}
			}
		});

		compositeRule.getCompositeCCQuerySetImpact().getBtnRemove().addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				StructuredSelection selectionRule = (StructuredSelection) compositeRules.getRulesListViewer().getSelection();
				StructuredSelection selectionQuery = (StructuredSelection) compositeRule.getCompositeCCQuerySetImpact().getListViewerQueries().getSelection();
				if(!selectionRule.isEmpty() && !selectionQuery.isEmpty()) {
					CrosscuttingConcernRule rule = (CrosscuttingConcernRule) selectionRule.getFirstElement();
					Query query = (Query) selectionQuery.getFirstElement();
					Command command = RemoveCommand.create(editingDomain, rule.getImpactQuerySet(), Literals.QUERY_SET__QUERIES, query);
					editingDomain.getCommandStack().execute(command);
					if(rule.getImpactQuerySet().getQueries().size() > 0)
						compositeRule.getCompositeCCQuerySetImpact().getListViewerQueries().setSelection(new StructuredSelection(rule.getImpactQuerySet().getQueries().get(rule.getImpactQuerySet().getQueries().size() - 1)));
				}
			}
		});
		
		sashForm.setWeights(new int[] {350, 500});
	}
	
	protected void initializeEditingDomain() {
		// Create an adapter factory that yields item providers.
		adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);

		adapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());
		adapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());
		adapterFactory.addAdapterFactory(new CCDetectorModelItemProviderAdapterFactory());

		// Create the command stack that will notify this editor as commands are executed.
		BasicCommandStack commandStack = new BasicCommandStack();
		
		// Create the editing domain with a special command stack.
		editingDomain = new AdapterFactoryEditingDomain(adapterFactory, commandStack, new HashMap<Resource, Boolean>());
	}
	
	public void createModel() {
		URI resourceURI = URI.createFileURI(modelURI);
		Exception exception = null;
		Resource resource = null;
		try {
			// Load the resource through the editing domain.
			resource = editingDomain.getResourceSet().getResource(resourceURI, true);
		}
		catch (Exception e) {
			exception = e;
			resource = editingDomain.getResourceSet().getResource(resourceURI, false);
		}
		modelRoot = (CrosscuttingConcernRuleSet) resource.getContents().get(0);
	}
	
	private void save() {
		boolean first = true;
		final Map<Object, Object> saveOptions = new HashMap<Object, Object>();
		saveOptions.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED, Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);
		for (Resource resource : editingDomain.getResourceSet().getResources()) {
			if ((first || !resource.getContents().isEmpty() || isPersisted(resource)) && !editingDomain.isReadOnly(resource)) {
				try {
					resource.save(saveOptions);
				}
				catch (Exception exception) {
					exception.printStackTrace();
				}
				first = false;
			}
		}
	}

	public boolean isDirty() {
		return ((BasicCommandStack)editingDomain.getCommandStack()).isSaveNeeded();
	}
	
	protected boolean isPersisted(Resource resource) {
		boolean result = false;
		try {
			InputStream stream = editingDomain.getResourceSet().getURIConverter().createInputStream(resource.getURI());
			if (stream != null) {
				result = true;
				stream.close();
			}
		}
		catch (IOException e) {
		}
		return result;
	}

	/**
	 * Launch the application.
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("*", new XMIResourceFactoryImpl());
			EPackage.Registry.INSTANCE.put(CCDetectorModelPackage.eNS_URI, CCDetectorModelPackage.eINSTANCE);
			CCRuleEditor window = new CCRuleEditor();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
